from snakemake.utils import validate
import pandas as pd
import os
import glob

# ----- load config file ----- #

configfile: "config/config.yml"

# ----- define functions ----- #
def _read_file_names(indir, extension='.fna'):
  return {x.split(extension)[0] for x in os.listdir(indir) if x.endswith(extension)}

# this function reads the full path to the dir
def _read_dir(indir):
  return {os.path.join(indir, x)
          for x in os.listdir(indir)}

# poppipe functions
prefix_match = re.match(r"^(.+)\.h5$", config["poppunk_h5_p"])
if prefix_match:
    db_prefix = prefix_match.group(1)
else:
    raise RuntimeError("PopPUNK DB is not a .h5 file")

samples = pd.read_table(config["poppunk_rfile_p"], header=None, index_col=0)
clusters = pd.read_table(config["poppunk_clusters_p"], sep=",").set_index("Taxon")

# ----- start execution of the rules ----- #

def _read_dir(indir):
    return [x for x in os.listdir(indir) if os.path.isdir(os.path.join(indir, x))]

rule all:
  input:
#      expand("/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/split_kmers.skf",
#             strain=_read_dir(config["strains_dir"])),
      expand("/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/align_variants.aln",
             strain=_read_dir(config["strains_dir"])),
      expand("/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/snp-dists.tsv",
             strain=_read_dir(config["strains_dir"])),
      expand("/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/snp-dists_te.tsv",
             strain=_read_dir(config["strains_dir"])),
      expand("/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/split_kmers.skf",
             strain=_read_dir(config["strains_dir_p"])),
      expand("/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/align_variants.aln",
             strain=_read_dir(config["strains_dir_p"])),
      expand("/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/snp-dists.tsv",
             strain=_read_dir(config["strains_dir_p"])),
      expand("/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/snp-dists_te.tsv",
             strain=_read_dir(config["strains_dir_p"])),
      expand("/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/split_kmers.skf",
             strain=_read_dir(config["strains_dir_e"])),
      expand("/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/align_variants.aln",
             strain=_read_dir(config["strains_dir_e"])),
      expand("/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/snp-dists.tsv",
             strain=_read_dir(config["strains_dir_e"])),
      expand("/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/snp-dists_te.tsv",
             strain=_read_dir(config["strains_dir_e"]))

# --- Klebsiella pneumo --- #

#rule run_skabuild:
#    input:
#        samples="/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/rfile.txt"
#    output:
#        skf="/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/split_kmers.skf",
#    params:
#        skf_prefix="/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/split_kmers",
#        fastq_qual=config['ska']['fastq_cov'],
#        fastq_cov=config['ska']['fastq_qual'],
#        kmer=config['ska']['kmer'],
#        single_strand=config['ska']['single_strand']
#    log:
#        "out/logs/ska_build_{strain}.log"
#    conda:
#        "envs/ska.yml"
#    script:
#        "scripts/run_ska_build.py"

rule run_skaalign:
    input:
        skf="/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/split_kmers.skf"
    output:
       alignment="/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/align_variants.aln"
    log:
        "out/logs/ska_align_{strain}.log"
    params:
        prefix="/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/align"
    conda:
        "envs/ska.yml"
    shell:
        "ska align {input.skf} > {output.alignment} 2> {log}"

rule run_snpsdist:
    input:
        aln="/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/align_variants.aln"
    output:
        snps="/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/snp-dists.tsv"
    log:
        "out/logs/snp-dists_{strain}.log"
    conda:
        "envs/snp-dists.yml"
    shell:
        "snp-dists -q -b -m {input.aln} > {output.snps}"

rule run_snps2te:
    input:
       snps="/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/snp-dists.tsv",
       data="/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/kp_metadata_all.tsv"
    output:
       "/vol/projects/jburgaya/pipeline/tenet/data/kpneumo/clusters/{strain}/snp-dists_te.tsv"
    log:
        "out/logs/te_{strain}.log"
    shell:
        "python workflow/scripts/snps2te.py {input.snps} {input.data}"

rule merge_te:
    log:
        "out/logs/te_merege.log"
    script:
        "scripts/merge_te.py"

# --- Pseudomonas aeruginosa --- #

rule run_skabuild_p:
    input:
        samples="/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/rfile.txt"
    output:
        skf="/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/split_kmers.skf",
    params:
        skf_prefix="/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/split_kmers",
        fastq_qual=config['ska']['fastq_cov'],
        fastq_cov=config['ska']['fastq_qual'],
        kmer=config['ska']['kmer'],
        single_strand=config['ska']['single_strand']
    log:
        "out/logs/ska_build_{strain}.log"
    conda:
        "envs/ska.yml"
    script:
        "scripts/run_ska_build.py"

rule run_skaalign_p:
    input:
        skf="/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/split_kmers.skf"
    output:
        alignment="/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/align_variants.aln"
    log:
        "out/logs/ska_align_{strain}.log"
    params:
        prefix="/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/align"
    conda:
        "envs/ska.yml"
    shell:
        "ska align {input.skf} > {output.alignment} 2> {log}"

rule run_snpsdist_p:
    input:
        aln="/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/align_variants.aln"
    output:
        snps="/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/snp-dists.tsv"
    log:
        "out/logs/snp-dists_{strain}.log"
    conda:
        "envs/snp-dists.yml"
    shell:
        "snp-dists -q -b -m {input.aln} > {output.snps}"

rule run_snps2te_p:
    input:
       snps="/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/snp-dists.tsv",
       data="/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/pa_metadata_all.tsv"
    output:
       "/vol/projects/jburgaya/pipeline/tenet/data/paeruginosa/clusters/{strain}/snp-dists_te.tsv"
    log:
        "out/logs/te_{strain}.log"
    shell:
        "python workflow/scripts/snps2te.py {input.snps} {input.data}"

rule merge_te_p:
    log:
        "out/logs/te_merge_pa.log"
    script:
	"scripts/merge_te_pa.py"

# --- Escherichia coli --- #

rule run_skabuild_e:
    input:
        samples="/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/rfile.txt"
    output:
        skf="/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/split_kmers.skf",
    params:
        skf_prefix="/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/split_kmers",
        fastq_qual=config['ska']['fastq_cov'],
        fastq_cov=config['ska']['fastq_qual'],
        kmer=config['ska']['kmer'],
        single_strand=config['ska']['single_strand']
    log:
        "out/logs/ska_build_e_{strain}.log"
    conda:
        "envs/ska.yml"
    script:
        "scripts/run_ska_build.py"

rule run_skaalign_e:
    input:
        skf="/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/split_kmers.skf"
    output:
        alignment="/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/align_variants.aln"
    log:
        "out/logs/ska_align_e_{strain}.log"
    params:
        prefix="/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/align"
    conda:
        "envs/ska.yml"
    shell:
        "ska align {input.skf} > {output.alignment} 2> {log}"

rule run_snpsdist_e:
    input:
        aln="/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/align_variants.aln"
    output:
        snps="/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/snp-dists.tsv"
    log:
        "out/logs/snp-dists_e_{strain}.log"
    conda:
        "envs/snp-dists.yml"
    shell:
        "snp-dists -q -b -m {input.aln} > {output.snps}"

rule run_snps2te_e:
    input:
       snps="/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/snp-dists.tsv",
       data="/vol/projects/jburgaya/pipeline/tenet/data/ecoli/ec_metadata_all.tsv"
    output:
       "/vol/projects/jburgaya/pipeline/tenet/data/ecoli/clusters/{strain}/snp-dists_te.tsv"
    log:
        "out/logs/te_{strain}.log"
    shell:
        "python workflow/scripts/snps2te.py {input.snps} {input.data}"

rule merge_te_e:
    log:
        "out/logs/te_merge_ec.log"
    script:
	"scripts/merge_te_ec.py"

